(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var o=t.g.document;if(!e&&o&&(o.currentScript&&(e=o.currentScript.src),!e)){var n=o.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"player.png",o=function(){function t(){}return t.prototype.move=function(t){},t.prototype.update=function(){},t.prototype.draw=function(){this.canvas2D.ctx.drawImage(this.image,this.pos.x,this.pos.y,this.size.width,this.size.height)},t.prototype.createPattern=function(){this.pattern=this.canvas2D.ctx.createPattern(this.image,"repeat-x")},Object.defineProperty(t.prototype,"posX",{get:function(){return this.pos.x},set:function(t){this.pos.x=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"posY",{get:function(){return this.pos.y},set:function(t){this.pos.y=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.size.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.size.height},enumerable:!1,configurable:!0}),t}();var n,i=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});const r=function(t){function e(e){var o=t.call(this)||this;return o.canvas2D=e,o.image=new Image,o}return i(e,t),e.prototype.update=function(){},e.prototype.notify=function(t){},Object.defineProperty(e.prototype,"getVelocityX",{get:function(){return this.velocityX},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"setVelocityX",{set:function(t){this.velocityX=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getVelocityY",{get:function(){return this.velocityY},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"setVelocityY",{set:function(t){this.velocityY=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getGravity",{get:function(){return this.gravity},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"setGravity",{set:function(t){this.gravity=t},enumerable:!1,configurable:!0}),e}(o);var s=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])})(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();const a=function(t){function o(o){var n=t.call(this,o)||this;return n.gravity=1,n.friction=.9,n.speed=75,n.jumpStrength=25,n.size={width:80,height:80},n.groundLevel=n.canvas2D.height-n.size.height,n.image.src=e,n.start(),n}return s(o,t),o.prototype.update=function(){this.updatePosition(),this.isOnGround()&&this.stopFalling(),this.draw()},o.prototype.notify=function(t){console.log("notify")},o.prototype.start=function(){this.velocityX=0,this.velocityY=0,this.pos={x:0,y:this.groundLevel}},o.prototype.updatePosition=function(){this.isOnPlatform?this.velocityY=0:this.isColliding?this.velocityY=this.jumpStrength:this.velocityY+=this.gravity,this.pos.y+=this.velocityY,this.velocityX*=this.friction,this.pos.x+=this.velocityX},o.prototype.stopFalling=function(){this.velocityY=0,this.gravity=0,this.pos.y=this.groundLevel},o.prototype.jump=function(){this.velocityY=-this.jumpStrength,this.gravity=1},o.prototype.move=function(t){switch(t){case"left":this.velocityX>-this.speed&&this.velocityX--;break;case"right":this.velocityX<this.speed&&this.velocityX++}},o.prototype.isOnGround=function(){return this.pos.y>=this.groundLevel},Object.defineProperty(o.prototype,"getJumpStrength",{get:function(){return this.jumpStrength},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"setJumpStrength",{set:function(t){this.jumpStrength=t},enumerable:!1,configurable:!0}),o}(r),c=function(){function t(){var t=this;this.keysPressed=[],document.addEventListener("keydown",(function(e){return t.keyDown(e)})),document.addEventListener("keyup",(function(e){return t.keyUp(e)}))}return t.prototype.keyDown=function(t){this.keysPressed[t.key]=!0},t.prototype.keyUp=function(t){this.keysPressed[t.key]=!1},t.prototype.getKey=function(t){return this.keysPressed[t]},t}(),p=t.p+"background.png",h=t.p+"grass.png";var u=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])})(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();const l=function(t){function e(e,o,n){var i=t.call(this)||this;return i.canvas2D=e,i.size={width:(400,600,Math.floor(200*Math.random())+400),height:80},i.pos={x:o,y:n},i.image=new Image,i.image.src=h,i.image.onload=i.createPattern.bind(i),i}return u(e,t),e.prototype.notify=function(){console.log("notified")},e.prototype.update=function(){this.draw()},e.prototype.draw=function(){this.canvas2D.ctx.save(),this.canvas2D.ctx.fillStyle=this.pattern,this.canvas2D.ctx.translate(this.pos.x,this.pos.y),this.canvas2D.ctx.fillRect(0,0,this.size.width,this.size.height),this.canvas2D.ctx.restore()},e}(o);var y=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])})(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();const f=function(t){function e(e){var o=t.call(this)||this;return o.observers=[],o.platforms=[],o.canvas2D=e,o.pos={x:0,y:0},o.speed=10,o.size={width:5e3,height:o.canvas2D.height},o.image=new Image,o.image.src=p,o.image.onload=o.createPattern.bind(o),o.generatePlatforms(),o}return y(e,t),e.prototype.generatePlatforms=function(){var t=new l(this.canvas2D,400,400);this.platforms.push(t),this.attach(t)},e.prototype.move=function(t){switch(t){case"left":this.pos.x+=this.speed;break;case"right":this.pos.x-=this.speed}},e.prototype.attach=function(t){this.observers.push(t)},e.prototype.detach=function(t){},e.prototype.notify=function(){for(var t=0,e=this.observers;t<e.length;t++)e[t].notify(this)},e.prototype.update=function(){this.canvas2D.ctx.save(),this.draw(),this.platforms.forEach((function(t){t.update()})),this.canvas2D.ctx.restore()},e.prototype.draw=function(){this.canvas2D.ctx.fillStyle=this.pattern,this.canvas2D.ctx.translate(this.pos.x,this.pos.y),this.canvas2D.ctx.fillRect(0,0,this.size.width,this.size.height)},e}(o),d=function(){function t(){this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.boundries=this.canvas.getBoundingClientRect()}return t.prototype.clear=function(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)},t.prototype.drawBackground=function(t){this.ctx.save(),this.ctx.fillStyle=t,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.restore()},t.prototype.update=function(){this.clear(),this.drawBackground("#333")},Object.defineProperty(t.prototype,"width",{get:function(){return this.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.canvas.height},enumerable:!1,configurable:!0}),t}(),g=function(){function t(t,e,o,n){this.collisionMargin=20,this.canvas2D=t,this.player=e,this.keyboard=o,this.level=n}return t.prototype.update=function(){this.collisionController(),this.keyboardController()},t.prototype.reachedLevelStart=function(){return this.level.posX>=0},t.prototype.reachedLevelEnd=function(){return this.level.posX-this.canvas2D.width<=-this.level.width},t.prototype.reachedScreenStart=function(){return this.player.posX<=200},t.prototype.reachedScreenEnd=function(){return this.player.posX+this.player.width>=this.canvas2D.width-200},t.prototype.keyboardController=function(){this.keyboard.getKey(" ")&&(this.player.isOnGround()||this.player.isOnPlatform)&&(this.player.isOnPlatform=!1,this.player.jump()),this.keyboard.getKey("ArrowLeft")&&(this.reachedScreenStart()||this.player.move("left"),this.reachedScreenStart()&&!this.reachedLevelStart()&&this.level.move("left")),this.keyboard.getKey("ArrowRight")&&(this.reachedScreenEnd()||this.player.move("right"),this.reachedScreenEnd()&&!this.reachedLevelEnd()&&this.level.move("right"))},t.prototype.isOnTop=function(t,e){return t.posY+t.height>=e.posY-this.collisionMargin&&t.posY+t.height<=e.posY+this.collisionMargin||t.posY+t.height===e.posY},t.prototype.detectCollision=function(t,e){return t.posX+t.width>=e.posX&&t.posX<=e.posX+e.width&&t.posY+t.height>=e.posY&&t.posY<=e.posY+e.height},t.prototype.collisionController=function(){var t=this;this.level.platforms.forEach((function(e){if(t.detectCollision(t.player,e)){if(t.player.isOnPlatform)return;t.isOnTop(t.player,e)?(t.player.posY=e.posY-t.player.height,t.player.isOnPlatform=!0):t.player.isColliding=!0}else t.player.isColliding=!1,t.player.isOnPlatform=!1}))},t}(),v=function(){function t(){this.characters=new Map,this.canvas2D=new d,this.player=new a(this.canvas2D),this.keyboard=new c,this.level=new f(this.canvas2D),this.characters.set("Player",this.player),this.engine=new g(this.canvas2D,this.player,this.keyboard,this.level),this.gameLoop()}return t.prototype.gameLoop=function(){this.canvas2D.update(),this.level.update(),this.engine.update(),this.updateCharacters(),requestAnimationFrame(this.gameLoop.bind(this))},t.prototype.updateCharacters=function(){this.characters.forEach((function(t){t.update()}))},t.startGame=function(){return t.instance||(t.instance=new t),t.instance},t}();window.addEventListener("load",(function(){v.startGame()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,